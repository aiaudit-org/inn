import os

from tensorflow.keras import backend as K
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# default parameters
if K.image_data_format() == "channels_first":
    INPUT_SHAPE = (1, 512, 512)
    IMAGE_SHAPE = INPUT_SHAPE[1:]
else:
    INPUT_SHAPE = (512, 512, 1)
    IMAGE_SHAPE = INPUT_SHAPE[:-1]

SEED = 1011  # random number generated by us
BATCH_SIZE_TRAIN = 64  # batch size for model training
BATCH_SIZE_VAL = 64  # batch size for model evaluation
BATCH_SIZE_TEST = 1  # batch size for model testing
ANGLE = 30  # limited angle missing wedge, data available for 20, 30


# loader functions
def load_train_data(batch_size=BATCH_SIZE_TRAIN):
    train_data_preprocessor = ImageDataGenerator(rescale=1 / 65535.0,)
    train_generator_full = train_data_preprocessor.flow_from_directory(
        os.path.join(os.path.split(__file__)[0], "training", "full"),
        target_size=IMAGE_SHAPE,
        batch_size=batch_size,
        class_mode=None,
        color_mode="grayscale",
        shuffle=True,
        seed=SEED,
    )
    train_generator_limited = train_data_preprocessor.flow_from_directory(
        os.path.join(
            os.path.split(__file__)[0],
            "training",
            "limited_angle_{}".format(ANGLE),
        ),
        target_size=IMAGE_SHAPE,
        batch_size=batch_size,
        class_mode=None,
        color_mode="grayscale",
        shuffle=True,
        seed=SEED,
    )
    return train_generator_limited, train_generator_full


def load_val_data(batch_size=BATCH_SIZE_VAL):
    val_data_preprocessor = ImageDataGenerator(rescale=1 / 65535.0,)
    val_generator_full = val_data_preprocessor.flow_from_directory(
        os.path.join(os.path.split(__file__)[0], "validation", "full"),
        target_size=IMAGE_SHAPE,
        batch_size=batch_size,
        class_mode=None,
        color_mode="grayscale",
        shuffle=False,
        seed=SEED,
    )
    val_generator_limited = val_data_preprocessor.flow_from_directory(
        os.path.join(
            os.path.split(__file__)[0],
            "validation",
            "limited_angle_{}".format(ANGLE),
        ),
        target_size=IMAGE_SHAPE,
        batch_size=batch_size,
        class_mode=None,
        color_mode="grayscale",
        shuffle=False,
        seed=SEED,
    )
    return val_generator_limited, val_generator_full


def load_test_data(batch_size=BATCH_SIZE_TEST):
    test_data_preprocessor = ImageDataGenerator(rescale=1 / 65535.0,)
    test_generator_full = test_data_preprocessor.flow_from_directory(
        os.path.join(os.path.split(__file__)[0], "testing", "full"),
        target_size=IMAGE_SHAPE,
        batch_size=batch_size,
        class_mode=None,
        color_mode="grayscale",
        shuffle=False,
        seed=SEED,
    )
    test_generator_limited = test_data_preprocessor.flow_from_directory(
        os.path.join(
            os.path.split(__file__)[0],
            "testing",
            "limited_angle_{}".format(ANGLE),
        ),
        target_size=IMAGE_SHAPE,
        batch_size=batch_size,
        class_mode=None,
        color_mode="grayscale",
        shuffle=False,
        seed=SEED,
    )
    return test_generator_limited, test_generator_full
